# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.api_pb2 as api__pb2


class AdditionStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
                '/math_api.Addition/add',
                request_serializer=api__pb2.request.SerializeToString,
                response_deserializer=api__pb2.response.FromString,
                )
        self.addStreamer = channel.unary_stream(
                '/math_api.Addition/addStreamer',
                request_serializer=api__pb2.request.SerializeToString,
                response_deserializer=api__pb2.response.FromString,
                )


class AdditionServicer(object):
    """Interface exported by the server.
    """

    def add(self, request, context):
        """A simple RPC.
        
        Gets two numbers and returns the sum of those numbers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addStreamer(self, request, context):
        """A server-to-client streaming RPC.
        
        Gets two numbers and streams the response 3 times (adding the result to the last result every time) to the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdditionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add': grpc.unary_unary_rpc_method_handler(
                    servicer.add,
                    request_deserializer=api__pb2.request.FromString,
                    response_serializer=api__pb2.response.SerializeToString,
            ),
            'addStreamer': grpc.unary_stream_rpc_method_handler(
                    servicer.addStreamer,
                    request_deserializer=api__pb2.request.FromString,
                    response_serializer=api__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'math_api.Addition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Addition(object):
    """Interface exported by the server.
    """

    @staticmethod
    def add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_api.Addition/add',
            api__pb2.request.SerializeToString,
            api__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addStreamer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/math_api.Addition/addStreamer',
            api__pb2.request.SerializeToString,
            api__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
